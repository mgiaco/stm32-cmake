diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..19faa12
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,8 @@
+/stm_libs
+/bin
+/cmsis/build
+/stdperiph/build
+/.project
+/stm32-blinky/.cproject
+/stm32-blinky/.project
+/stm32-blinky/.settings/language.settings.xml
diff --git a/build_settings.cmake b/build_settings.cmake
new file mode 100644
index 0000000..77a49e6
--- /dev/null
+++ b/build_settings.cmake
@@ -0,0 +1,14 @@
+SET(CMAKE_MAKE_PROGRAM c:/MinGW32/bin/mingw32-make.exe CACHE FILEPATH "Make program")
+SET(CMAKE_TOOLCHAIN_FILE "c:/workdir/github_c/stm32-cmake/gcc_stm32.cmake" CACHE FILEPATH "Toolchain file")
+SET(TOOLCHAIN_PREFIX "c:/Program Files (x86)/GNU Tools ARM Embedded/4.9 2015q1" CACHE PATH "Toolchain prefix")
+#SET(TOOLCHAIN_PREFIX "c:/DAVEv4/DAVE-4.0.0/eclipse/ARM-GCC-49" CACHE PATH "Toolchain prefix")
+SET(STM32_CHIP "STM32F103RB" CACHE STRING "stm32 chip")
+#SET(STM32_CHIP "STM32F411RE" CACHE STRING "stm32 chip")
+SET(STM32F1_StdPeriphLib_DIR  "c:/workdir/libs/stm32/STM32F10x_StdPeriph_Lib_V3.5.0" CACHE PATH "StdPeriph path")
+SET(CMAKE_INSTALL_PREFIX "c:/workdir/github_c/stm32-cmake/bin" CACHE PATH "Install prefix")
+SET(CMAKE_MODULE_PATH "c:/workdir/github_c/stm32-cmake/cmake/Modules" CACHE PATH "CMake modules path")
+SET(EXTRA_FIND_PATH "${CMAKE_INSTALL_PREFIX}" CACHE PATH "Build root path")
+SET(CMAKE_ECLIPSE_VERSION "4.4" CACHE STRING "Eclipse version")
+
+
+
diff --git a/build_settings_cmsis_and_std_f1.cmake b/build_settings_cmsis_and_std_f1.cmake
new file mode 100644
index 0000000..05d9e8c
--- /dev/null
+++ b/build_settings_cmsis_and_std_f1.cmake
@@ -0,0 +1,15 @@
+SET(CMAKE_MAKE_PROGRAM c:/MinGW32/bin/mingw32-make.exe CACHE FILEPATH "Make program")
+SET(CMAKE_TOOLCHAIN_FILE "c:/workdir/github_c/stm32-cmake/gcc_stm32.cmake" CACHE FILEPATH "Toolchain file")
+SET(TOOLCHAIN_PREFIX "c:/Program Files (x86)/GNU Tools ARM Embedded/4.9 2015q1" CACHE PATH "Toolchain prefix")
+#SET(TOOLCHAIN_PREFIX "c:/DAVEv4/DAVE-4.0.0/eclipse/ARM-GCC-49" CACHE PATH "Toolchain prefix")
+SET(STM32_FAMILY "F1" CACHE STRING "stm32 family")
+#SET(STM32_CHIP "STM32F103RB" CACHE STRING "stm32 chip")
+#SET(STM32_CHIP "STM32F411RE" CACHE STRING "stm32 chip")
+SET(STM32F1_StdPeriphLib_DIR  "c:/workdir/libs/stm32/STM32F10x_StdPeriph_Lib_V3.5.0" CACHE PATH "StdPeriph path")
+SET(CMAKE_INSTALL_PREFIX "c:/workdir/github_c/stm32-cmake/bin" CACHE PATH "Install prefix")
+SET(CMAKE_MODULE_PATH "c:/workdir/github_c/stm32-cmake/cmake/Modules" CACHE PATH "CMake modules path")
+SET(EXTRA_FIND_PATH "${CMAKE_INSTALL_PREFIX}" CACHE PATH "Build root path")
+SET(CMAKE_ECLIPSE_VERSION "4.4" CACHE STRING "Eclipse version")
+
+
+
diff --git a/cmsis/read.me b/cmsis/read.me
new file mode 100644
index 0000000..bbbb721
--- /dev/null
+++ b/cmsis/read.me
@@ -0,0 +1 @@
+cmake.exe -G "MinGW Makefiles" -C ../../build_settings_cmsis_and_std_f1.cmake -DCMAKE_BUILD_TYPE=Debug ../
diff --git a/stdperiph/read.me b/stdperiph/read.me
new file mode 100644
index 0000000..bbbb721
--- /dev/null
+++ b/stdperiph/read.me
@@ -0,0 +1 @@
+cmake.exe -G "MinGW Makefiles" -C ../../build_settings_cmsis_and_std_f1.cmake -DCMAKE_BUILD_TYPE=Debug ../
diff --git a/stm32-blinky/fabfile.py b/stm32-blinky/fabfile.py
new file mode 100644
index 0000000..8c87c3d
--- /dev/null
+++ b/stm32-blinky/fabfile.py
@@ -0,0 +1,55 @@
+from fabric.api import *
+from fabric.context_managers import lcd
+import fabric.contrib.project as project
+import os
+import shutil
+import sys
+
+# Local path configuration (can be absolute or relative to fabfile)
+env.build_path = 'build_cm3'
+BUILD_PATH = env.build_path
+
+
+def clean():
+	if os.path.isdir(BUILD_PATH):
+		with lcd(BUILD_PATH):
+			local('make clean -j4')
+
+
+def clean_all():
+    if os.path.isdir(BUILD_PATH):
+    	shutil.rmtree(BUILD_PATH, ignore_errors=True)
+        #local('rmdir /s /q {build_path}'.format(**env))
+
+
+def configure():
+		if not os.path.exists(BUILD_PATH):
+			os.mkdir(BUILD_PATH)
+			#local('mkdir ' + BUILD_PATH)
+			with lcd(BUILD_PATH):
+				local('cmake.exe -G "MinGW Makefiles" -C ../../build_settings.cmake -DCMAKE_BUILD_TYPE=Debug ../')
+
+def all():
+	if not os.path.exists(BUILD_PATH):
+		configure()
+
+	with lcd(BUILD_PATH):
+		local('make -j4 all')
+
+
+def make():
+	with lcd(BUILD_PATH):
+		local('make -j4')
+
+
+def build():
+    all()
+
+def rebuild():
+    clean()
+    all()
+
+def rebuild_all():
+	clean_all()
+	all()
+
